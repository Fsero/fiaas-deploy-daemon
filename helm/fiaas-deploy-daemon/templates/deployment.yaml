apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: "{{ .Values.name }}"
  labels:
    app: "{{ .Values.name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.name }}"
  template:
    metadata:
      annotations:
        prometheus.io/path: /internal-backstage/prometheus
        prometheus.io/port: http5000
        prometheus.io/scrape: "true"
      labels:
        app: "{{ .Values.name }}"
    spec:
      containers:
      - name: "{{ .Values.name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
        - fiaas-deploy-daemon
        - --enable-tpr-support
        - --ingress-suffix
        - "{{ .Values.ingress.domainName }}"
        env:
        - name: LOG_STDOUT
          value: "true"
        - name: FIAAS_INFRASTRUCTURE
          value: diy
        - name: FIAAS_ENVIRONMENT
          value: pro
        - name: LOG_FORMAT
          value: plain
        - name: IMAGE
          value: "{{ .Values.image.repository }}"
        - name: VERSION
          value: "{{ .Values.image.tag }}"
        ports:
        - containerPort: 5000
          name: http5000
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: /healthz
            port: http5000
            scheme: HTTP
        readinessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: /healthz
            port: http5000
            scheme: HTTP
{{- if .Values.deployment.includeResourceUsage }}
        resources:
          limits:
            cpu: 125m
            memory: 64Mi
          requests:
            cpu: 125m
            memory: 64Mi
{{- end }}
      restartPolicy: Always
